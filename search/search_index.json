{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u2693\ufe0e Event study plots are increasingly popular in applied research. esplot is a new command for stata allowing researchers to quickly and easily create event study plots. Install \u2693\ufe0e Install from within stata net install esplot, from(\"https://raw.githubusercontent.com/dballaelliott/esplot/pkg/\") Download/clone from github The github repository can be found here . Two options for syntax \u2693\ufe0e esplot is flexible and provides the user with two alternative ways of specifying the event study. If we don't have panel data, we simply use the syntax esplot <outcome> <event_time> where the event_time variable is simply the time of the observation relative to treament (or the event). example: state minimum wage laws Let's assume we are measuring the effect of minimum wage laws on wage. For the sake of this example, let's say that two states, CA and NY , have minimum wage increases in 2011 and 2010, respectively. Thus, an observation in CA in 2010 would have event_time = -1, but an observation in NY in 2010 would have event_time = 0. We would then simply use the syntax: esplot wage event_time . state year event_time wage CA 2010 -1 10 CA 2011 0 12 CA 2012 1 12 CA 2012 1 15 CA 2009 -2 11 NY 2009 -1 10 NY 2010 0 15 NY 2011 1 15 NY 2010 0 17 If we do have panel data, then esplot has more powerful options. In this paradigm, we call esplot with the following syntax: esplot <outcome>, event(<event_indicator>) Behind the scenes, esplot will transform the data to create a vector of event-time indicators. In this paradigm, the event_indicator variable should evaluate to 1 in periods where a unit experiences an event and zero elsewhere. esplot has additional features that are reserved for panel data. Currently, the compare option is only available when using panel data. event_time vs. event_indicator variables \u2693\ufe0e A common source of error when using esplot is the incorrect definition of and event_time or event_indicator variable. With panel data and esplot <outcome>, event(<event_indicator>) syntax, the event_indicator variable should be defined as event_indicator = <current_time> == <time of event> When using esplot <outcome> <event_time> syntax, the event_time variable should be defined as event_time = <current_time> - <time of event> unlocking esplot with panel data \u2693\ufe0e With panel data, we have the additional option compare , allowing us to estimate a difference-in-difference event study. The syntax esplot <outcome>, event(<event_indicator>) compare(<alt_event_indicator>) will return an event study plot of the difference between the event coefficients and the compare coefficents. For example, this framework can be used to compare the productivity effect of assigning a unit a high-skill manager, relative to a low skill manager. Additionally, esplot appropriately handles sources of common mistakes when manually generating a relative time variable, such as when some units have more than one event (or no event at all). Advanced \u2693\ufe0e Accessing Regression Output \u2693\ufe0e In esplot 0.9.3 (March, 2021) and later, the internal reghdfe call is made available to be user. Typing estimates after esplot is done running will print the regression output and save the return objects to e() and r() . This allows esplot estimates to be used with post-estimation commands, like test and eststo / esttab . See help reghdfe for more information on the information that is returned. Note that because of the technical implementation, the estimates are stored and then reloaded; this means that e(sample) cannot be used (see help estimates use for more information.) The save_sample option is provided as a workaround.","title":"Getting Started"},{"location":"#getting-started","text":"Event study plots are increasingly popular in applied research. esplot is a new command for stata allowing researchers to quickly and easily create event study plots.","title":"Getting Started"},{"location":"#install","text":"Install from within stata net install esplot, from(\"https://raw.githubusercontent.com/dballaelliott/esplot/pkg/\") Download/clone from github The github repository can be found here .","title":"Install"},{"location":"#two-options-for-syntax","text":"esplot is flexible and provides the user with two alternative ways of specifying the event study. If we don't have panel data, we simply use the syntax esplot <outcome> <event_time> where the event_time variable is simply the time of the observation relative to treament (or the event). example: state minimum wage laws Let's assume we are measuring the effect of minimum wage laws on wage. For the sake of this example, let's say that two states, CA and NY , have minimum wage increases in 2011 and 2010, respectively. Thus, an observation in CA in 2010 would have event_time = -1, but an observation in NY in 2010 would have event_time = 0. We would then simply use the syntax: esplot wage event_time . state year event_time wage CA 2010 -1 10 CA 2011 0 12 CA 2012 1 12 CA 2012 1 15 CA 2009 -2 11 NY 2009 -1 10 NY 2010 0 15 NY 2011 1 15 NY 2010 0 17 If we do have panel data, then esplot has more powerful options. In this paradigm, we call esplot with the following syntax: esplot <outcome>, event(<event_indicator>) Behind the scenes, esplot will transform the data to create a vector of event-time indicators. In this paradigm, the event_indicator variable should evaluate to 1 in periods where a unit experiences an event and zero elsewhere. esplot has additional features that are reserved for panel data. Currently, the compare option is only available when using panel data.","title":"Two options for syntax"},{"location":"#event_time-vs-event_indicator-variables","text":"A common source of error when using esplot is the incorrect definition of and event_time or event_indicator variable. With panel data and esplot <outcome>, event(<event_indicator>) syntax, the event_indicator variable should be defined as event_indicator = <current_time> == <time of event> When using esplot <outcome> <event_time> syntax, the event_time variable should be defined as event_time = <current_time> - <time of event>","title":"event_time vs. event_indicator  variables"},{"location":"#unlocking-esplot-with-panel-data","text":"With panel data, we have the additional option compare , allowing us to estimate a difference-in-difference event study. The syntax esplot <outcome>, event(<event_indicator>) compare(<alt_event_indicator>) will return an event study plot of the difference between the event coefficients and the compare coefficents. For example, this framework can be used to compare the productivity effect of assigning a unit a high-skill manager, relative to a low skill manager. Additionally, esplot appropriately handles sources of common mistakes when manually generating a relative time variable, such as when some units have more than one event (or no event at all).","title":"unlocking esplot with panel data"},{"location":"#advanced","text":"","title":"Advanced"},{"location":"#accessing-regression-output","text":"In esplot 0.9.3 (March, 2021) and later, the internal reghdfe call is made available to be user. Typing estimates after esplot is done running will print the regression output and save the return objects to e() and r() . This allows esplot estimates to be used with post-estimation commands, like test and eststo / esttab . See help reghdfe for more information on the information that is returned. Note that because of the technical implementation, the estimates are stored and then reloaded; this means that e(sample) cannot be used (see help estimates use for more information.) The save_sample option is provided as a workaround.","title":"Accessing Regression Output"},{"location":"key_features/","text":"Key Features \u2693\ufe0e TODO generate a dataset that has the following features - individual FE - two treatment effects: a \"good\" treatment and an \"ok\" treatment (and a control) - groups: for old people the good treatment is 2x better, for young people, the good and ok are ~ the same this lets us illustrate 1) event & compare (i.e. DiD) 2) heterogeneity (old/young people get diff. treatment effects)","title":"Key Features"},{"location":"key_features/#key-features","text":"TODO generate a dataset that has the following features - individual FE - two treatment effects: a \"good\" treatment and an \"ok\" treatment (and a control) - groups: for old people the good treatment is 2x better, for young people, the good and ok are ~ the same this lets us illustrate 1) event & compare (i.e. DiD) 2) heterogeneity (old/young people get diff. treatment effects)","title":"Key Features"},{"location":"options/","text":"Documentation \u2693\ufe0e Core Syntax \u2693\ufe0e esplot can be called one of two ways. with an event-time variable: esplot <outcome> <event_time> [, options] or with an event indicator (on panel data): esplot <outcome>, event(<event_indicator> [, suboptions]) [options] Options \u2693\ufe0e General Options \u2693\ufe0e compare(<event_indicator> [, options]) Only available when using the event(<event_indicator>) syntax. Plot the difference between the event-time coefficents associated with the event in event and the event given in compare . For example, esplot infected, event(treatment) compare(placebo) will estimate event-time coefficents around the treatment event and the placebo event and will plot the difference between the treatment and placebo arms. event_indicator suboptions (for compare and event) save this causes the vector of relative-time indicators created by esplot around the event given in either event or compare to be saved to memory. This option is useful when running many specifications of the same event study, as it can save time when used with nogen by creating this vector only once. nogen this vector tells esplot that the vector of relative-time indicators around this particular event already exist (probably aftering being created by an earlier call to esplot with the save option.) replace allows esplot to write over the existing vector of relative-time indicators (rarely used.) example esplot income, event(treatment, save) // saves indicators... esplot ln_income, event(treatment, nogen) // use saved indicators window(start end [, options]) display dynamic effect estimates (event-time coefficents) ranging from start to end . start should be less than zero; end should be greater than zero. window recognizes four suboptions that control how endpoints (i.e. periods outside the window) should be treated. By default, esplot will fully saturate the model with relative time indicators for every possible period, except for the omitted period (t = -1). The bin , bin_pre , and bin_post cause endpoints to be binned; see below for more information. endpoint suboptions (for window) saturate default option, equivalent to typing nothing. esplot will find the maximum and minimum relative time periods supported in the data (i.e. the last period in the data minus the earliest event, and the first period in the data minus the latest event.) Then esplot will fully saturate the model will all possible relative time periods. Some of these coefficients may not be well identified (some may even drop out). bin Define an indicator for \\(j <\\) start and an indicator for \\(j >\\) end, where \\(j\\) is relative time. Rather than including all possible event-time indicators, we \"bin\" all event-time indicators before/after the window starts/ends. Thus, rather than estimating the full set of dynamic effects, we estimate dynamic effects only within the specified window, and estimate (but do not plot) constant long-run effects before and after the window. bin_pre Define an indicator for \\(j <\\) start, but use all possible post-event relative time indicators for estimation. bin_post Define an indicator for \\(j >\\) end, but use all possible pre-event relative time indicators for estimation. Further reading There is a very active applied econometric literature concerning the correct specification of event-study estimates. Baker, Larcker, & Wang, 2021 show that binned and saturated models can lead to substantively different estimates, especially in the presence of pre-trends. esplot therefore makes both options available to users. It uses the fully saturated model as the default since this enforces the least structure on the research design. Borusyak & Jaravel, 2018 argue that the fully saturated model is most robust to long run pre- and post- trends, since it does not impose a parametric assumption on dynamic effects before/after a given period. Researchers are then, of course, free to impose that structure as a design choice with any of the three variants of the window sub-options. Schmidheiny & Siegloch, 2020 show that imposing the structure implied by binning (i.e. that effects are constant before/after some periods) can improve identification of time fixed effects. by(varname) estimate coefficents seperately for each level of by . For example, esplot wage years_since_policy, by(education) will estimate the event-time coefficients for the relative time given in years_since_policy seperately for each level of education and plot as many series as there are levels of education. difference estimate coefficents relative to the base-level of by . For example, if education has \\(k\\) levels, then typing esplot wage years_since_policy, by(education) will estimate the event-time coefficients for the relative time given in years_since_policy seperately for each level of education and plot the difference between each of the \\(k-1\\) sets of event-time coefficients and the base level of the by variable. Using difference in combination with compare allows for the estimation of difference-in-difference-in-difference coefficients. estimate_reference by default, esplot includes indicator variables for all relative time periods except for -1. If the estimate_reference option is specified, the indicator for -1 is included and explicitly differenced out of the rest of the coefficients. When used with by , it recenters each series indepently, so that each series is mechanically 0 at time -1. savedata(filename [,replace]) in addition to plotting directly, esplot will save the estimated coefficients to filename . This allows for the greatest flexibility in plotting the estimates. Coefficents are saved after applying all operations, like differencing ( difference or compare ), or pooling ( period_length ). Can be abbreviated save(...) . save_sample(varname) store the output of e(sample) in varname following the internal regression call. Regression Options \u2693\ufe0e controls(varlist) additional control variables to be included in the internal regression call. absorb(varlist) a vector of fixed effects to absorbed and not estimated in the internal regression call. help reghdfe##absvar for more information. vce(vcetype, subopt) specify the types of standard errors computed. help reghdfe##opt_vce for more information. Not compatible with quantile . quantile(0 < k < 100) if this option is specified, esplot will use a quantile regression, rather than OLS. quantile(50) and quantile(.5) are synonyms, and will cause esplot to estimate a median regression. weights are allowed when using OLS (default), but not when quantile is specified. Display Options \u2693\ufe0e period_length(integer) pool dynamic effect coefficients in groups of period_length before plotting. colors(colorstylelist) ordered list of colors; used for point estimates and confidence intervals. using custom colors while Stata provides a set of named colors, it is often desirable to use custom RGB codes further personalize graphics. esplot will correctly parse a list of quote-delimited RGB value. For example: colors(\"220 114 107\" \"0 171 176\") . If these quotes are not provided, Stata will parse each number as an entry in the list. If compound double quotes are used, the entire list will be treated as single object. To use colorpalette schemes with esplot , simply pass the `r(p)' object directly to the sub-option, without enclosing in quotes. For example: colorpalette HCL dark, n(2) nograph esplot y t , colors(`r(p)') Additional twoway options can be specified and will be passed through to the internal twoway call. help twoway_options","title":"Documentation"},{"location":"options/#documentation","text":"","title":"Documentation"},{"location":"options/#core-syntax","text":"esplot can be called one of two ways. with an event-time variable: esplot <outcome> <event_time> [, options] or with an event indicator (on panel data): esplot <outcome>, event(<event_indicator> [, suboptions]) [options]","title":"Core Syntax"},{"location":"options/#options","text":"","title":"Options"},{"location":"options/#general-options","text":"compare(<event_indicator> [, options]) Only available when using the event(<event_indicator>) syntax. Plot the difference between the event-time coefficents associated with the event in event and the event given in compare . For example, esplot infected, event(treatment) compare(placebo) will estimate event-time coefficents around the treatment event and the placebo event and will plot the difference between the treatment and placebo arms. event_indicator suboptions (for compare and event) save this causes the vector of relative-time indicators created by esplot around the event given in either event or compare to be saved to memory. This option is useful when running many specifications of the same event study, as it can save time when used with nogen by creating this vector only once. nogen this vector tells esplot that the vector of relative-time indicators around this particular event already exist (probably aftering being created by an earlier call to esplot with the save option.) replace allows esplot to write over the existing vector of relative-time indicators (rarely used.) example esplot income, event(treatment, save) // saves indicators... esplot ln_income, event(treatment, nogen) // use saved indicators window(start end [, options]) display dynamic effect estimates (event-time coefficents) ranging from start to end . start should be less than zero; end should be greater than zero. window recognizes four suboptions that control how endpoints (i.e. periods outside the window) should be treated. By default, esplot will fully saturate the model with relative time indicators for every possible period, except for the omitted period (t = -1). The bin , bin_pre , and bin_post cause endpoints to be binned; see below for more information. endpoint suboptions (for window) saturate default option, equivalent to typing nothing. esplot will find the maximum and minimum relative time periods supported in the data (i.e. the last period in the data minus the earliest event, and the first period in the data minus the latest event.) Then esplot will fully saturate the model will all possible relative time periods. Some of these coefficients may not be well identified (some may even drop out). bin Define an indicator for \\(j <\\) start and an indicator for \\(j >\\) end, where \\(j\\) is relative time. Rather than including all possible event-time indicators, we \"bin\" all event-time indicators before/after the window starts/ends. Thus, rather than estimating the full set of dynamic effects, we estimate dynamic effects only within the specified window, and estimate (but do not plot) constant long-run effects before and after the window. bin_pre Define an indicator for \\(j <\\) start, but use all possible post-event relative time indicators for estimation. bin_post Define an indicator for \\(j >\\) end, but use all possible pre-event relative time indicators for estimation. Further reading There is a very active applied econometric literature concerning the correct specification of event-study estimates. Baker, Larcker, & Wang, 2021 show that binned and saturated models can lead to substantively different estimates, especially in the presence of pre-trends. esplot therefore makes both options available to users. It uses the fully saturated model as the default since this enforces the least structure on the research design. Borusyak & Jaravel, 2018 argue that the fully saturated model is most robust to long run pre- and post- trends, since it does not impose a parametric assumption on dynamic effects before/after a given period. Researchers are then, of course, free to impose that structure as a design choice with any of the three variants of the window sub-options. Schmidheiny & Siegloch, 2020 show that imposing the structure implied by binning (i.e. that effects are constant before/after some periods) can improve identification of time fixed effects. by(varname) estimate coefficents seperately for each level of by . For example, esplot wage years_since_policy, by(education) will estimate the event-time coefficients for the relative time given in years_since_policy seperately for each level of education and plot as many series as there are levels of education. difference estimate coefficents relative to the base-level of by . For example, if education has \\(k\\) levels, then typing esplot wage years_since_policy, by(education) will estimate the event-time coefficients for the relative time given in years_since_policy seperately for each level of education and plot the difference between each of the \\(k-1\\) sets of event-time coefficients and the base level of the by variable. Using difference in combination with compare allows for the estimation of difference-in-difference-in-difference coefficients. estimate_reference by default, esplot includes indicator variables for all relative time periods except for -1. If the estimate_reference option is specified, the indicator for -1 is included and explicitly differenced out of the rest of the coefficients. When used with by , it recenters each series indepently, so that each series is mechanically 0 at time -1. savedata(filename [,replace]) in addition to plotting directly, esplot will save the estimated coefficients to filename . This allows for the greatest flexibility in plotting the estimates. Coefficents are saved after applying all operations, like differencing ( difference or compare ), or pooling ( period_length ). Can be abbreviated save(...) . save_sample(varname) store the output of e(sample) in varname following the internal regression call.","title":"General Options"},{"location":"options/#regression-options","text":"controls(varlist) additional control variables to be included in the internal regression call. absorb(varlist) a vector of fixed effects to absorbed and not estimated in the internal regression call. help reghdfe##absvar for more information. vce(vcetype, subopt) specify the types of standard errors computed. help reghdfe##opt_vce for more information. Not compatible with quantile . quantile(0 < k < 100) if this option is specified, esplot will use a quantile regression, rather than OLS. quantile(50) and quantile(.5) are synonyms, and will cause esplot to estimate a median regression. weights are allowed when using OLS (default), but not when quantile is specified.","title":"Regression Options"},{"location":"options/#display-options","text":"period_length(integer) pool dynamic effect coefficients in groups of period_length before plotting. colors(colorstylelist) ordered list of colors; used for point estimates and confidence intervals. using custom colors while Stata provides a set of named colors, it is often desirable to use custom RGB codes further personalize graphics. esplot will correctly parse a list of quote-delimited RGB value. For example: colors(\"220 114 107\" \"0 171 176\") . If these quotes are not provided, Stata will parse each number as an entry in the list. If compound double quotes are used, the entire list will be treated as single object. To use colorpalette schemes with esplot , simply pass the `r(p)' object directly to the sub-option, without enclosing in quotes. For example: colorpalette HCL dark, n(2) nograph esplot y t , colors(`r(p)') Additional twoway options can be specified and will be passed through to the internal twoway call. help twoway_options","title":"Display Options"}]}